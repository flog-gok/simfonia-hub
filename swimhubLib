-- UILibrary.lua
-- A reusable UI library for Roblox

-- Services
local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Library table
local UILibrary = {}

-- Helper function to create a UICorner
local function createCorner(parent, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 10)
    corner.Parent = parent
    return corner
end

-- Helper function to create a UIListLayout
local function createLayout(parent, direction, padding, hAlign, vAlign)
    local layout = Instance.new("UIListLayout")
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding = UDim.new(0, padding or 5)
    layout.FillDirection = direction or Enum.FillDirection.Vertical
    layout.HorizontalAlignment = hAlign or Enum.HorizontalAlignment.Center
    layout.VerticalAlignment = vAlign or Enum.VerticalAlignment.Top
    layout.Parent = parent
    return layout
end

-- Create a new window
function UILibrary:CreateWindow(name)
    local window = {}
    window.ScreenGui = Instance.new("ScreenGui")
    window.ScreenGui.Parent = CoreGui
    window.ScreenGui.ResetOnSpawn = false
    window.ScreenGui.Enabled = true

    window.MainFrame = Instance.new("Frame")
    window.MainFrame.Size = UDim2.new(0, 1000, 0, 700)
    window.MainFrame.Position = UDim2.new(0.5, -500, 0.5, -350)
    window.MainFrame.BackgroundTransparency = 1
    window.MainFrame.BorderSizePixel = 2
    window.MainFrame.BorderColor3 = Color3.fromRGB(0, 255, 0)
    window.MainFrame.Parent = window.ScreenGui

    createLayout(window.MainFrame, Enum.FillDirection.Horizontal, 10, Enum.HorizontalAlignment.Center, Enum.VerticalAlignment.Center)

    window.Sections = {}

    -- Create a new section
    function window:CreateSection(name)
        local section = {}
        section.Frame = Instance.new("Frame")
        section.Frame.Size = UDim2.new(0, 180, 0, 600)
        section.Frame.BackgroundColor3 = Color3.fromRGB(0, 30, 60)
        section.Frame.BackgroundTransparency = 0.2
        section.Frame.BorderSizePixel = 1
        section.Frame.BorderColor3 = Color3.fromRGB(0, 255, 0)
        section.Frame.Parent = window.MainFrame

        createCorner(section.Frame, 10)
        createLayout(section.Frame)

        section.Label = Instance.new("TextLabel")
        section.Label.Size = UDim2.new(1, 0, 0, 30)
        section.Label.BackgroundTransparency = 1
        section.Label.Text = name
        section.Label.TextColor3 = Color3.fromRGB(0, 255, 0)
        section.Label.TextSize = 14
        section.Label.Font = Enum.Font.Code
        section.Label.Parent = section.Frame

        table.insert(window.Sections, section)

        -- Create a toggle
        function section:CreateToggle(options)
            local toggle = {}
            toggle.Enabled = options.default or false
            toggle.Callback = options.callback or function() end

            toggle.Button = Instance.new("TextButton")
            toggle.Button.Size = UDim2.new(0.9, 0, 0, 40)
            toggle.Button.BackgroundColor3 = toggle.Enabled and Color3.fromRGB(0, 50, 80) or Color3.fromRGB(0, 30, 60)
            toggle.Button.BackgroundTransparency = 0.2
            toggle.Button.BorderSizePixel = 1
            toggle.Button.BorderColor3 = Color3.fromRGB(0, 255, 0)
            toggle.Button.Text = ""
            toggle.Button.Parent = section.Frame

            createCorner(toggle.Button, 10)

            toggle.Label = Instance.new("TextLabel")
            toggle.Label.Size = UDim2.new(0.8, 0, 1, 0)
            toggle.Label.Position = UDim2.new(0.1, 0, 0, 0)
            toggle.Label.BackgroundTransparency = 1
            toggle.Label.Text = options.name or "Toggle"
            toggle.Label.TextColor3 = Color3.fromRGB(0, 255, 0)
            toggle.Label.TextSize = 14
            toggle.Label.Font = Enum.Font.Code
            toggle.Label.TextXAlignment = Enum.TextXAlignment.Center
            toggle.Label.Parent = toggle.Button

            toggle.Dot = Instance.new("TextLabel")
            toggle.Dot.Size = UDim2.new(0.1, 0, 1, 0)
            toggle.Dot.Position = UDim2.new(0.85, 0, 0, 0)
            toggle.Dot.BackgroundTransparency = 1
            toggle.Dot.Text = "."
            toggle.Dot.TextColor3 = Color3.fromRGB(0, 255, 0)
            toggle.Dot.TextSize = 14
            toggle.Dot.Font = Enum.Font.Code
            toggle.Dot.TextXAlignment = Enum.TextXAlignment.Right
            toggle.Dot.Parent = toggle.Button

            -- Settings frame for toggle
            toggle.SettingsFrame = Instance.new("Frame")
            toggle.SettingsFrame.Size = UDim2.new(0, 200, 0, 0)
            toggle.SettingsFrame.BackgroundColor3 = Color3.fromRGB(0, 20, 40)
            toggle.SettingsFrame.BackgroundTransparency = 0
            toggle.SettingsFrame.BorderSizePixel = 1
            toggle.SettingsFrame.BorderColor3 = Color3.fromRGB(0, 255, 0)
            toggle.SettingsFrame.Visible = false
            toggle.SettingsFrame.Parent = window.ScreenGui

            createCorner(toggle.SettingsFrame, 10)
            createLayout(toggle.SettingsFrame)

            toggle.SettingsLabel = Instance.new("TextLabel")
            toggle.SettingsLabel.Size = UDim2.new(1, 0, 0, 30)
            toggle.SettingsLabel.BackgroundTransparency = 1
            toggle.SettingsLabel.Text = options.name .. " Settings"
            toggle.SettingsLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
            toggle.SettingsLabel.TextSize = 14
            toggle.SettingsLabel.Font = Enum.Font.Code
            toggle.SettingsLabel.Parent = toggle.SettingsFrame

            local function updateSettingsPosition()
                local buttonAbsPos = toggle.Button.AbsolutePosition
                local buttonAbsSize = toggle.Button.AbsoluteSize
                toggle.SettingsFrame.Position = UDim2.new(0, buttonAbsPos.X + buttonAbsSize.X + 10, 0, buttonAbsPos.Y)
            end

            local function showSettings()
                toggle.SettingsFrame.Visible = true
                toggle.SettingsFrame.Size = UDim2.new(0, 0, 0, 0)
                toggle.SettingsFrame.BackgroundTransparency = 1

                local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
                local tween = TweenService:Create(toggle.SettingsFrame, tweenInfo, {
                    Size = UDim2.new(0, 200, 0, options.settingsHeight or 100),
                    BackgroundTransparency = 0
                })
                tween:Play()
            end

            toggle.Button.MouseButton1Click:Connect(function()
                toggle.Enabled = not toggle.Enabled
                toggle.Button.BackgroundColor3 = toggle.Enabled and Color3.fromRGB(0, 50, 80) or Color3.fromRGB(0, 30, 60)
                toggle.Callback(toggle.Enabled)
            end)

            toggle.Button.MouseButton2Click:Connect(function()
                if toggle.SettingsFrame.Visible then
                    toggle.SettingsFrame.Visible = false
                else
                    updateSettingsPosition()
                    showSettings()
                end
            end)

            return toggle
        end

        -- Create a slider
        function section:CreateSlider(options)
            local slider = {}
            slider.Value = options.default or options.min or 0
            slider.Min = options.min or 0
            slider.Max = options.max or 100
            slider.Unit = options.unit or ""
            slider.Callback = options.callback or function() end

            slider.Label = Instance.new("TextLabel")
            slider.Label.Size = UDim2.new(0.8, 0, 0, 20)
            slider.Label.BackgroundTransparency = 1
            slider.Label.Text = options.name .. ": " .. slider.Value .. " " .. slider.Unit
            slider.Label.TextColor3 = Color3.fromRGB(0, 255, 0)
            slider.Label.TextSize = 12
            slider.Label.Font = Enum.Font.Code
            slider.Label.Parent = toggle.SettingsFrame

            slider.Frame = Instance.new("Frame")
            slider.Frame.Size = UDim2.new(0.8, 0, 0, 20)
            slider.Frame.BackgroundColor3 = Color3.fromRGB(0, 30, 60)
            slider.Frame.BackgroundTransparency = 0.2
            slider.Frame.BorderSizePixel = 1
            slider.Frame.BorderColor3 = Color3.fromRGB(0, 255, 0)
            slider.Frame.Parent = toggle.SettingsFrame

            createCorner(slider.Frame, 5)

            slider.Knob = Instance.new("TextButton")
            slider.Knob.Size = UDim2.new(0, 20, 1, 0)
            slider.Knob.Position = UDim2.new((slider.Value - slider.Min) / (slider.Max - slider.Min), 0, 0, 0)
            slider.Knob.BackgroundColor3 = Color3.fromRGB(0, 50, 80)
            slider.Knob.BorderSizePixel = 1
            slider.Knob.BorderColor3 = Color3.fromRGB(0, 255, 0)
            slider.Knob.Text = ""
            slider.Knob.Parent = slider.Frame

            createCorner(slider.Knob, 5)

            local isDragging = false
            slider.Knob.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDragging = true
                end
            end)

            slider.Knob.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDragging = false
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local mousePos = input.Position.X
                    local framePos = slider.Frame.AbsolutePosition.X
                    local frameWidth = slider.Frame.AbsoluteSize.X - slider.Knob.AbsoluteSize.X
                    local relativeX = math.clamp((mousePos - framePos) / frameWidth, 0, 1)

                    slider.Knob.Position = UDim2.new(relativeX, 0, 0, 0)
                    slider.Value = math.floor(slider.Min + (slider.Max - slider.Min) * relativeX)
                    slider.Label.Text = options.name .. ": " .. slider.Value .. " " .. slider.Unit
                    slider.Callback(slider.Value)
                end
            end)

            return slider
        end

        -- Create a keybind
        function section:CreateKeybind(options)
            local keybind = {}
            keybind.SelectedKey = options.default or nil
            keybind.IsSelecting = false
            keybind.Callback = options.callback or function() end

            keybind.Label = Instance.new("TextLabel")
            keybind.Label.Size = UDim2.new(0.8, 0, 0, 20)
            keybind.Label.BackgroundTransparency = 1
            keybind.Label.Text = "Keybind: " .. (keybind.SelectedKey and keybind.SelectedKey.Name or "Not Set")
            keybind.Label.TextColor3 = Color3.fromRGB(0, 255, 0)
            keybind.Label.TextSize = 12
            keybind.Label.Font = Enum.Font.Code
            keybind.Label.Parent = toggle.SettingsFrame

            keybind.SetButton = Instance.new("TextButton")
            keybind.SetButton.Size = UDim2.new(0.8, 0, 0, 30)
            keybind.SetButton.BackgroundColor3 = Color3.fromRGB(0, 30, 60)
            keybind.SetButton.BackgroundTransparency = 0.2
            keybind.SetButton.BorderSizePixel = 1
            keybind.SetButton.BorderColor3 = Color3.fromRGB(0, 255, 0)
            keybind.SetButton.Text = "Set Keybind"
            keybind.SetButton.TextColor3 = Color3.fromRGB(0, 255, 0)
            keybind.SetButton.TextSize = 14
            keybind.SetButton.Font = Enum.Font.Code
            keybind.SetButton.Parent = toggle.SettingsFrame

            createCorner(keybind.SetButton, 10)

            keybind.RemoveButton = Instance.new("TextButton")
            keybind.RemoveButton.Size = UDim2.new(0.8, 0, 0, 30)
            keybind.RemoveButton.BackgroundColor3 = Color3.fromRGB(0, 30, 60)
            keybind.RemoveButton.BackgroundTransparency = 0.2
            keybind.RemoveButton.BorderSizePixel = 1
            keybind.RemoveButton.BorderColor3 = Color3.fromRGB(0, 255, 0)
            keybind.RemoveButton.Text = "Remove Keybind"
            keybind.RemoveButton.TextColor3 = Color3.fromRGB(0, 255, 0)
            keybind.RemoveButton.TextSize = 14
            keybind.RemoveButton.Font = Enum.Font.Code
            keybind.RemoveButton.Parent = toggle.SettingsFrame

            createCorner(keybind.RemoveButton, 10)

            keybind.SetButton.MouseButton1Click:Connect(function()
                keybind.IsSelecting = true
                keybind.SetButton.Text = "Press a Key..."
            end)

            keybind.RemoveButton.MouseButton1Click:Connect(function()
                keybind.SelectedKey = nil
                keybind.Label.Text = "Keybind: Not Set"
            end)

            UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
                if gameProcessedEvent then return end
                if keybind.IsSelecting and input.UserInputType == Enum.UserInputType.Keyboard then
                    keybind.SelectedKey = input.KeyCode
                    keybind.SetButton.Text = "Set Keybind"
                    keybind.Label.Text = "Keybind: " .. keybind.SelectedKey.Name
                    keybind.IsSelecting = false
                elseif keybind.SelectedKey and input.KeyCode == keybind.SelectedKey then
                    keybind.Callback()
                end
            end)

            return keybind
        end

        -- Create a color picker
        function section:CreateColorPicker(options)
            local colorPicker = {}
            colorPicker.Color = options.default or Color3.fromRGB(255, 255, 255)
            colorPicker.Callback = options.callback or function() end

            local sliders = {"Red", "Green", "Blue"}
            local colors = {Color3.fromRGB(255, 0, 0), Color3.fromRGB(0, 255, 0), Color3.fromRGB(0, 0, 255)}
            colorPicker.Sliders = {}

            for i, colorName in ipairs(sliders) do
                local slider = {}
                slider.Value = math.floor(colorPicker.Color[colorName:sub(1, 1)] * 255)

                slider.Label = Instance.new("TextLabel")
                slider.Label.Size = UDim2.new(0.8, 0, 0, 20)
                slider.Label.BackgroundTransparency = 1
                slider.Label.Text = colorName .. ": " .. slider.Value
                slider.Label.TextColor3 = colors[i]
                slider.Label.TextSize = 12
                slider.Label.Font = Enum.Font.Code
                slider.Label.Parent = toggle.SettingsFrame

                slider.Frame = Instance.new("Frame")
                slider.Frame.Size = UDim2.new(0.8, 0, 0, 20)
                slider.Frame.BackgroundColor3 = Color3.fromRGB(0, 30, 60)
                slider.Frame.BackgroundTransparency = 0.2
                slider.Frame.BorderSizePixel = 1
                slider.Frame.BorderColor3 = Color3.fromRGB(0, 255, 0)
                slider.Frame.Parent = toggle.SettingsFrame

                createCorner(slider.Frame, 5)

                slider.Knob = Instance.new("TextButton")
                slider.Knob.Size = UDim2.new(0, 20, 1, 0)
                slider.Knob.Position = UDim2.new(slider.Value / 255, 0, 0, 0)
                slider.Knob.BackgroundColor3 = colors[i]
                slider.Knob.BorderSizePixel = 1
                slider.Knob.BorderColor3 = Color3.fromRGB(0, 255, 0)
                slider.Knob.Text = ""
                slider.Knob.Parent = slider.Frame

                createCorner(slider.Knob, 5)

                slider.IsDragging = false
                slider.Knob.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        slider.IsDragging = true
                    end
                end)

                slider.Knob.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        slider.IsDragging = false
                    end
                end)

                UserInputService.InputChanged:Connect(function(input)
                    if slider.IsDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local mousePos = input.Position.X
                        local framePos = slider.Frame.AbsolutePosition.X
                        local frameWidth = slider.Frame.AbsoluteSize.X - slider.Knob.AbsoluteSize.X
                        local relativeX = math.clamp((mousePos - framePos) / frameWidth, 0, 1)

                        slider.Knob.Position = UDim2.new(relativeX, 0, 0, 0)
                        slider.Value = math.floor(255 * relativeX)
                        slider.Label.Text = colorName .. ": " .. slider.Value

                        local r = colorPicker.Sliders.Red.Value
                        local g = colorPicker.Sliders.Green.Value
                        local b = colorPicker.Sliders.Blue.Value
                        colorPicker.Color = Color3.fromRGB(r, g, b)
                        colorPicker.Callback(colorPicker.Color)
                    end
                end)

                colorPicker.Sliders[colorName] = slider
            end

            return colorPicker
        end

        -- Create a label
        function section:CreateLabel(options)
            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(0.8, 0, 0, 30)
            label.BackgroundColor3 = Color3.fromRGB(0, 50, 80)
            label.BackgroundTransparency = 0.2
            label.BorderSizePixel = 1
            label.BorderColor3 = Color3.fromRGB(0, 255, 0)
            label.Text = options.text or "Label"
            label.TextColor3 = Color3.fromRGB(0, 255, 0)
            label.TextSize = 14
            label.Font = Enum.Font.Code
            label.Parent = toggle.SettingsFrame

            createCorner(label, 10)
            return label
        end

        return section
    end

    return window
end

return UILibrary
