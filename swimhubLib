-- CoreGui Cheat UI Library
-- A UI library for Roblox cheats, styled like the provided screenshot

local CoreGuiCheatLibrary = {}
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")

-- Create a new UI instance in CoreGui
function CoreGuiCheatLibrary:CreateUI(title)
    local ui = {
        elements = {},
        keybind = nil,
        dragging = false,
        dragInput = nil,
        dragStart = nil,
        startPos = nil,
        tabs = {"combat", "visuals", "entity visuals", "local", "ui"},
        currentTab = "entity visuals",
        toggles = {}
    }

    -- ScreenGui
    ui.elements.screenGui = Instance.new("ScreenGui")
    ui.elements.screenGui.Name = "CheatCoreUI"
    ui.elements.screenGui.Parent = CoreGui
    ui.elements.screenGui.ResetOnSpawn = false
    ui.elements.screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    -- Main Frame
    ui.elements.mainFrame = Instance.new("Frame")
    ui.elements.mainFrame.Size = UDim2.new(0, 800, 0, 500)
    ui.elements.mainFrame.Position = UDim2.new(0.5, -400, 0.5, -250)
    ui.elements.mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    ui.elements.mainFrame.BackgroundTransparency = 0.4
    ui.elements.mainFrame.BorderSizePixel = 0
    ui.elements.mainFrame.ClipsDescendants = true
    ui.elements.mainFrame.Parent = ui.elements.screenGui
    ui.elements.mainFrame.Visible = false

    ui.elements.mainFrameCorner = Instance.new("UICorner")
    ui.elements.mainFrameCorner.CornerRadius = UDim.new(0, 10)
    ui.elements.mainFrameCorner.Parent = ui.elements.mainFrame

    -- Tabs Area
    ui.elements.tabFrame = Instance.new("Frame")
    ui.elements.tabFrame.Size = UDim2.new(1, 0, 0, 40)
    ui.elements.tabFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
    ui.elements.tabFrame.BackgroundTransparency = 0.4
    ui.elements.tabFrame.BorderSizePixel = 0
    ui.elements.tabFrame.Parent = ui.elements.mainFrame

    ui.elements.tabFrameCorner = Instance.new("UICorner")
    ui.elements.tabFrameCorner.CornerRadius = UDim.new(0, 10)
    ui.elements.tabFrameCorner.Parent = ui.elements.tabFrame

    ui.elements.tabLayout = Instance.new("UIListLayout")
    ui.elements.tabLayout.FillDirection = Enum.FillDirection.Horizontal
    ui.elements.tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ui.elements.tabLayout.Padding = UDim.new(0, 5)
    ui.elements.tabLayout.Parent = ui.elements.tabFrame

    ui.elements.tabPadding = Instance.new("UIPadding")
    ui.elements.tabPadding.PaddingLeft = UDim.new(0, 5)
    ui.elements.tabPadding.Parent = ui.elements.tabFrame

    -- Create Tabs
    for _, tabName in ipairs(ui.tabs) do
        local tabButton = Instance.new("TextButton")
        tabButton.Size = UDim2.new(0, 120, 1, 0)
        tabButton.BackgroundColor3 = ui.currentTab == tabName and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(30, 30, 30)
        tabButton.BackgroundTransparency = 0.4
        tabButton.Text = tabName
        tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        tabButton.TextScaled = true
        tabButton.Font = Enum.Font.Gotham
        tabButton.BorderSizePixel = 0
        tabButton.Parent = ui.elements.tabFrame

        local tabCorner = Instance.new("UICorner")
        tabCorner.CornerRadius = UDim.new(0, 5)
        tabCorner.Parent = tabButton

        tabButton.MouseButton1Click:Connect(function()
            ui.currentTab = tabName
            for _, btn in pairs(ui.elements.tabFrame:GetChildren()) do
                if btn:IsA("TextButton") then
                    btn.BackgroundColor3 = btn.Text == ui.currentTab and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(30, 30, 30)
                end
            end
            for _, section in pairs(ui.elements.contentFrame:GetChildren()) do
                if section:IsA("Frame") then
                    section.Visible = section.Name == ui.currentTab
                end
            end
        end)
    end

    -- Content Area
    ui.elements.contentFrame = Instance.new("Frame")
    ui.elements.contentFrame.Size = UDim2.new(1, 0, 1, -40)
    ui.elements.contentFrame.Position = UDim2.new(0, 0, 0, 40)
    ui.elements.contentFrame.BackgroundTransparency = 1
    ui.elements.contentFrame.Parent = ui.elements.mainFrame

    -- Left Section (entity visuals)
    ui.elements.leftSection = Instance.new("Frame")
    ui.elements.leftSection.Name = "entity visuals"
    ui.elements.leftSection.Size = UDim2.new(0.5, -5, 1, 0)
    ui.elements.leftSection.Position = UDim2.new(0, 5, 0, 0)
    ui.elements.leftSection.BackgroundTransparency = 1
    ui.elements.leftSection.Parent = ui.elements.contentFrame

    ui.elements.leftListLayout = Instance.new("UIListLayout")
    ui.elements.leftListLayout.Padding = UDim.new(0, 5)
    ui.elements.leftListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ui.elements.leftListLayout.Parent = ui.elements.leftSection

    ui.elements.leftPadding = Instance.new("UIPadding")
    ui.elements.leftPadding.PaddingLeft = UDim.new(0, 5)
    ui.elements.leftPadding.PaddingTop = UDim.new(0, 5)
    ui.elements.leftPadding.Parent = ui.elements.leftSection

    -- Right Section (placeholder for other tabs)
    ui.elements.rightSection = Instance.new("Frame")
    ui.elements.rightSection.Name = "rightSection"
    ui.elements.rightSection.Size = UDim2.new(0.5, -5, 1, 0)
    ui.elements.rightSection.Position = UDim2.new(0.5, 0, 0, 0)
    ui.elements.rightSection.BackgroundTransparency = 1
    ui.elements.rightSection.Parent = ui.elements.contentFrame

    -- Dragging functionality
    local function updateInput(input)
        local delta = input.Position - ui.dragStart
        ui.elements.mainFrame.Position = UDim2.new(ui.startPos.X.Scale, ui.startPos.X.Offset + delta.X, ui.startPos.Y.Scale, ui.startPos.Y.Offset + delta.Y)
    end

    ui.elements.tabFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            ui.dragging = true
            ui.dragStart = input.Position
            ui.startPos = ui.elements.mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    ui.dragging = false
                end
            end)
        end
    end)

    ui.elements.tabFrame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and ui.dragging then
            ui.dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == ui.dragInput and ui.dragging then
            updateInput(input)
        end
    end)

    -- Keybind functionality
    local function toggleUI()
        ui.elements.mainFrame.Visible = not ui.elements.mainFrame.Visible
    end

    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and ui.keybind and input.KeyCode == ui.keybind then
            toggleUI()
        end
    end)

    -- UI Methods
    local uiInstance = {}

    -- Set Keybind
    function uiInstance:SetKeybind(keyCode)
        ui.keybind = keyCode
    end

    -- Add Toggle (Checkbox)
    function uiInstance:AddToggle(text, defaultValue, callback)
        local toggleFrame = Instance.new("Frame")
        toggleFrame.Size = UDim2.new(1, 0, 0, 30)
        toggleFrame.BackgroundTransparency = 1
        toggleFrame.Parent = ui.elements.leftSection

        local toggleLabel = Instance.new("TextLabel")
        toggleLabel.Size = UDim2.new(0.8, 0, 1, 0)
        toggleLabel.BackgroundTransparency = 1
        toggleLabel.Text = text or "Toggle"
        toggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        toggleLabel.TextScaled = true
        toggleLabel.Font = Enum.Font.Gotham
        toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
        toggleLabel.Parent = toggleFrame

        local toggleButton = Instance.new("TextButton")
        toggleButton.Size = UDim2.new(0, 20, 0, 20)
        toggleButton.Position = UDim2.new(0.9, 0, 0.5, -10)
        toggleButton.BackgroundColor3 = defaultValue and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(50, 50, 50)
        toggleButton.Text = ""
        toggleButton.BorderSizePixel = 0
        toggleButton.Parent = toggleFrame

        local toggleCorner = Instance.new("UICorner")
        toggleCorner.CornerRadius = UDim.new(0, 5)
        toggleCorner.Parent = toggleButton

        local toggleState = defaultValue or false
        ui.toggles[text] = toggleState

        toggleButton.MouseButton1Click:Connect(function()
            toggleState = not toggleState
            ui.toggles[text] = toggleState
            toggleButton.BackgroundColor3 = toggleState and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(50, 50, 50)
            if callback then
                callback(toggleState)
            end
        end)

        return toggleFrame
    end

    -- Add Slider
    function uiInstance:AddSlider(text, minValue, maxValue, defaultValue, callback)
        local sliderFrame = Instance.new("Frame")
        sliderFrame.Size = UDim2.new(1, 0, 0, 50)
        sliderFrame.BackgroundTransparency = 1
        sliderFrame.Parent = ui.elements.leftSection

        local sliderLabel = Instance.new("TextLabel")
        sliderLabel.Size = UDim2.new(1, 0, 0, 20)
        sliderLabel.BackgroundTransparency = 1
        sliderLabel.Text = text or "Slider"
        sliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        sliderLabel.TextScaled = true
        sliderLabel.Font = Enum.Font.Gotham
        sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
        sliderLabel.Parent = sliderFrame

        local sliderBar = Instance.new("Frame")
        sliderBar.Size = UDim2.new(1, 0, 0, 10)
        sliderBar.Position = UDim2.new(0, 0, 0, 30)
        sliderBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        sliderBar.BorderSizePixel = 0
        sliderBar.Parent = sliderFrame

        local sliderBarCorner = Instance.new("UICorner")
        sliderBarCorner.CornerRadius = UDim.new(0, 5)
        sliderBarCorner.Parent = sliderBar

        local sliderFill = Instance.new("Frame")
        sliderFill.Size = UDim2.new((defaultValue - minValue) / (maxValue - minValue), 0, 1, 0)
        sliderFill.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        sliderFill.BorderSizePixel = 0
        sliderFill.Parent = sliderBar

        local sliderFillCorner = Instance.new("UICorner")
        sliderFillCorner.CornerRadius = UDim.new(0, 5)
        sliderFillCorner.Parent = sliderFill

        local sliderValue = Instance.new("TextLabel")
        sliderValue.Size = UDim2.new(0, 100, 0, 20)
        sliderValue.Position = UDim2.new(1, -100, 0, 5)
        sliderValue.BackgroundTransparency = 1
        sliderValue.Text = tostring(defaultValue) .. " studs"
        sliderValue.TextColor3 = Color3.fromRGB(255, 255, 255)
        sliderValue.TextScaled = true
        sliderValue.Font = Enum.Font.Gotham
        sliderValue.Parent = sliderFrame

        local sliderDragging = false
        sliderBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                sliderDragging = true
            end
        end)

        sliderBar.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                sliderDragging = false
            end
        end)

        UserInputService.InputChanged:Connect(function(input)
            if sliderDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local mousePos = UserInputService:GetMouseLocation()
                local relativePos = mousePos.X - sliderBar.AbsolutePosition.X
                local fraction = math.clamp(relativePos / sliderBar.AbsoluteSize.X, 0, 1)
                local value = minValue + (maxValue - minValue) * fraction
                value = math.floor(value)
                sliderFill.Size = UDim2.new(fraction, 0, 1, 0)
                sliderValue.Text = tostring(value) .. " studs"
                if callback then
                    callback(value)
                end
            end
        end)

        return sliderFrame
    end

    return uiInstance
end

return CoreGuiCheatLibrary
