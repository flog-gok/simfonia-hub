-- Source
-- SwimHub UI Library and Menu Implementation
-- Contains UILib and creates a cheat menu with categories, sections, and interactive elements

-- UILib Definition
local UILib = {}
UILib.__index = UILib

-- Services
local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")

-- Creates a new UI menu
function UILib.new(config)
    config = config or {}
    local self = setmetatable({}, UILib)
    
    self.Size = config.size or UDim2.new(0, 800, 0, 600)
    self.BackgroundColor = config.backgroundColor or Color3.fromRGB(50, 50, 50)
    self.BorderColor = config.borderColor or Color3.fromRGB(30, 30, 30)
    self.CategoryButtonColor = config.categoryButtonColor or Color3.fromRGB(60, 60, 60)
    self.CategoryFrameColor = config.categoryFrameColor or Color3.fromRGB(45, 45, 45)
    
    self.UI = {}
    self.Categories = {}
    self.CategoryButtons = {}
    self.CategoryFrames = {}
    self.SeparatorLines = {}
    self.Sections = {}
    self.ElementPositions = {}
    self.ActiveCategory = nil
    
    self:Initialize()
    return self
end

function UILib:Initialize()
    self.UI.ScreenGui = Instance.new("ScreenGui")
    self.UI.ScreenGui.Name = "SwimHubMenu"
    self.UI.ScreenGui.Parent = CoreGui
    self.UI.ScreenGui.ResetOnSpawn = false
    self.UI.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    self.UI.Frame = Instance.new("Frame")
    self.UI.Frame.Name = "MainFrame"
    self.UI.Frame.Size = self.Size
    self.UI.Frame.Position = UDim2.new(0.5, -self.Size.X.Offset / 2, 0.5, -self.Size.Y.Offset / 2)
    self.UI.Frame.BackgroundColor3 = self.BackgroundColor
    self.UI.Frame.BorderSizePixel = 0
    self.UI.Frame.Parent = self.UI.ScreenGui

    self.UI.Stroke = Instance.new("UIStroke")
    self.UI.Stroke.Thickness = 2
    self.UI.Stroke.Color = self.BorderColor
    self.UI.Stroke.Parent = self.UI.Frame

    self.UI.TopLine = Instance.new("Frame")
    self.UI.TopLine.Name = "TopLine"
    self.UI.TopLine.Size = UDim2.new(1, 0, 0, 2)
    self.UI.TopLine.Position = UDim2.new(0, 0, 0, 55)
    self.UI.TopLine.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    self.UI.TopLine.BorderSizePixel = 0
    self.UI.TopLine.Parent = self.UI.Frame

    self.UI.CategoryContainer = Instance.new("Frame")
    self.UI.CategoryContainer.Name = "CategoryContainer"
    self.UI.CategoryContainer.Size = UDim2.new(1, 0, 0, 50)
    self.UI.CategoryContainer.Position = UDim2.new(0, 0, 0, 5)
    self.UI.CategoryContainer.BackgroundTransparency = 1
    self.UI.CategoryContainer.Parent = self.UI.Frame
end

function UILib:AddCategory(categoryName)
    table.insert(self.Categories, categoryName)
    self.ElementPositions[categoryName] = 10
    self.Sections[categoryName] = {Left = nil, Right = nil}
    
    local totalWidth = self.Size.X.Offset
    local separatorCount = math.max(0, #self.Categories - 1)
    local buttonWidth = (totalWidth - separatorCount * 2) / #self.Categories

    self.CategoryButtons[categoryName] = Instance.new("TextButton")
    local button = self.CategoryButtons[categoryName]
    button.Name = categoryName .. "Button"
    button.Size = UDim2.new(0, buttonWidth, 0, 50)
    button.Position = UDim2.new(0, (#self.Categories - 1) * (buttonWidth + 2), 0, 0)
    button.BackgroundColor3 = self.CategoryButtonColor
    button.BorderSizePixel = 0
    button.Text = categoryName
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 18
    button.Font = Enum.Font.SourceSansBold
    button.Parent = self.UI.CategoryContainer

    self.CategoryFrames[categoryName] = Instance.new("Frame")
    local frame = self.CategoryFrames[categoryName]
    frame.Name = categoryName .. "Frame"
    frame.Size = UDim2.new(1, -20, 0, self.Size.Y.Offset - 65)
    frame.Position = UDim2.new(0, 10, 0, 65)
    frame.BackgroundColor3 = self.CategoryFrameColor
    frame.BorderSizePixel = 0
    frame.Visible = (#self.Categories == 1)
    frame.Parent = self.UI.Frame

    for i, sep in ipairs(self.SeparatorLines) do
        sep:Destroy()
    end
    self.SeparatorLines = {}
    for i = 1, #self.Categories - 1 do
        self.SeparatorLines[i] = Instance.new("Frame")
        self.SeparatorLines[i].Name = "Separator" .. i
        self.SeparatorLines[i].Size = UDim2.new(0, 2, 1, 0)
        self.SeparatorLines[i].Position = UDim2.new(0, i * (buttonWidth + 2) - 2, 0, 0)
        self.SeparatorLines[i].BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        self.SeparatorLines[i].BorderSizePixel = 0
        self.SeparatorLines[i].Parent = self.UI.CategoryContainer
    end

    button.MouseButton1Click:Connect(function()
        if self.ActiveCategory ~= categoryName then
            if self.ActiveCategory then
                self.CategoryFrames[self.ActiveCategory].Visible = false
            end
            self.CategoryFrames[categoryName].Visible = true
            self.ActiveCategory = categoryName
        end
    end)

    return frame
end

function UILib:AddSection(category, side)
    if not self.CategoryFrames[category] then return end
    side = side:lower():gsub("^%l", string.upper)
    if side ~= "Left" and side ~= "Right" then return end

    local section = Instance.new("Frame")
    section.Name = side .. "Section"
    section.Size = UDim2.new(0.5, -15, 1, -10)
    section.Position = UDim2.new(side == "Left" and 0 or 0.5, side == "Left" and 5 or 10, 0, 5)
    section.BackgroundTransparency = 1
    section.Parent = self.CategoryFrames[category]
    
    self.Sections[category][side] = section
    self.ElementPositions[category .. side] = 10
    
    return section
end

function UILib:AddButton(category, name, callback)
    if not self.CategoryFrames[category] then return end
    
    local parent = self.Sections[category].Right or self.Sections[category].Left or self.CategoryFrames[category]
    local positionKey = self.Sections[category].Right and (category .. "Right") or
                        self.Sections[category].Left and (category .. "Left") or category
    local yPos = self.ElementPositions[positionKey]
    
    local button = Instance.new("TextButton")
    button.Name = name .. "Button"
    button.Size = UDim2.new(1, -10, 0, 30)
    button.Position = UDim2.new(0, 5, 0, yPos)
    button.BackgroundColor3 = self.CategoryButtonColor
    button.BorderSizePixel = 0
    button.Text = name
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 16
    button.Font = Enum.Font.SourceSans
    button.Parent = parent
    
    self.ElementPositions[positionKey] = yPos + 40
    
    if callback then
        button.MouseButton1Click:Connect(callback)
    end
    
    return button
end

function UILib:AddToggle(category, name, default, callback)
    if not self.CategoryFrames[category] then return end
    
    local parent = self.Sections[category].Right or self.Sections[category].Left or self.CategoryFrames[category]
    local positionKey = self.Sections[category].Right and (category .. "Right") or
                        self.Sections[category].Left and (category .. "Left") or category
    local yPos = self.ElementPositions[positionKey]
    
    local frame = Instance.new("Frame")
    frame.Name = name .. "Toggle"
    frame.Size = UDim2.new(1, -10, 0, 30)
    frame.Position = UDim2.new(0, 5, 0, yPos)
    frame.BackgroundTransparency = 1
    frame.Parent = parent
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.8, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = name
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = 16
    label.Font = Enum.Font.SourceSans
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = frame
    
    local toggle = Instance.new("TextButton")
    toggle.Size = UDim2.new(0, 30, 0, 30)
    toggle.Position = UDim2.new(1, -30, 0, 0)
    toggle.BackgroundColor3 = default and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    toggle.BorderSizePixel = 0
    toggle.Text = ""
    toggle.Parent = frame
    
    self.ElementPositions[positionKey] = yPos + 40
    
    local state = default
    toggle.MouseButton1Click:Connect(function()
        state = not state
        toggle.BackgroundColor3 = state and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
        if callback then callback(state) end
    end)
    
    return frame, toggle
end

function UILib:AddKeybind(category, name, default, callback)
    if not self.CategoryFrames[category] then return end
    
    local parent = self.Sections[category].Right or self.Sections[category].Left or self.CategoryFrames[category]
    local positionKey = self.Sections[category].Right and (category .. "Right") or
                        self.Sections[category].Left and (category .. "Left") or category
    local yPos = self.ElementPositions[positionKey]
    
    local frame = Instance.new("Frame")
    frame.Name = name .. "Keybind"
    frame.Size = UDim2.new(1, -10, 0, 30)
    frame.Position = UDim2.new(0, 5, 0, yPos)
    frame.BackgroundTransparency = 1
    frame.Parent = parent
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.8, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = name
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = 16
    label.Font = Enum.Font.SourceSans
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = frame
    
    local keybind = Instance.new("TextButton")
    keybind.Size = UDim2.new(0, 60, 0, 30)
    keybind.Position = UDim2.new(1, -60, 0, 0)
    keybind.BackgroundColor3 = self.CategoryButtonColor
    keybind.BorderSizePixel = 0
    keybind.Text = default and default.Name or "None"
    keybind.TextColor3 = Color3.fromRGB(255, 255, 255)
    keybind.TextSize = 16
    keybind.Font = Enum.Font.SourceSans
    keybind.Parent = frame
    
    self.ElementPositions[positionKey] = yPos + 40
    
    local waitingForInput = false
    keybind.MouseButton1Click:Connect(function()
        waitingForInput = true
        keybind.Text = "..."
    end)
    
    UserInputService.InputBegan:Connect(function(input)
        if waitingForInput and input.UserInputType == Enum.UserInputType.Keyboard then
            waitingForInput = false
            keybind.Text = input.KeyCode.Name
            if callback then callback(input.KeyCode) end
        end
    end)
    
    return frame, keybind
end

function UILib:AddColorPicker(category, name, default, callback)
    if not self.CategoryFrames[category] then return end
    
    local parent = self.Sections[category].Right or self.Sections[category].Left or self.CategoryFrames[category]
    local positionKey = self.Sections[category].Right and (category .. "Right") or
                        self.Sections[category].Left and (category .. "Left") or category
    local yPos = self.ElementPositions[positionKey]
    
    local frame = Instance.new("Frame")
    frame.Name = name .. "ColorPicker"
    frame.Size = UDim2.new(1, -10, 0, 30)
    frame.Position = UDim2.new(0, 5, 0, yPos)
    frame.BackgroundTransparency = 1
    frame.Parent = parent
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.8, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = name
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = 16
    label.Font = Enum.Font.SourceSans
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = frame
    
    local colorButton = Instance.new("TextButton")
    colorButton.Size = UDim2.new(0, 30, 0, 30)
    colorButton.Position = UDim2.new(1, -30, 0, 0)
    colorButton.BackgroundColor3 = default or Color3.fromRGB(255, 255, 255)
    colorButton.BorderSizePixel = 0
    colorButton.Text = ""
    colorButton.Parent = frame
    
    self.ElementPositions[positionKey] = yPos + 40
    
    colorButton.MouseButton1Click:Connect(function()
        local newColor = Color3.fromRGB(math.random(0, 255), math.random(0, 255), math.random(0, 255))
        colorButton.BackgroundColor3 = newColor
        if callback then callback(newColor) end
    end)
    
    return frame, colorButton
end

function UILib:GetCategoryFrame(categoryName)
    return self.CategoryFrames[categoryName]
end

function UILib:Destroy()
    if self.UI.ScreenGui then
        self.UI.ScreenGui:Destroy()
    end
    self.UI = {}
    self.Categories = {}
    self.CategoryButtons = {}
    self.CategoryFrames = {}
    self.SeparatorLines = {}
    self.Sections = {}
    self.ElementPositions = {}
    self.ActiveCategory = nil
end

-- Create and Populate Menu
local menu = UILib.new({
    size = UDim2.new(0, 800, 0, 600),
    backgroundColor = Color3.fromRGB(50, 50, 50),
    borderColor = Color3.fromRGB(30, 30, 30),
    categoryButtonColor = Color3.fromRGB(60, 60, 60),
    categoryFrameColor = Color3.fromRGB(45, 45, 45)
})

local categories = {"COMBAT", "VISUALS", "HACKS", "LOCAL", "UI"}
for _, category in ipairs(categories) do
    local frame = menu:AddCategory(category)
    
    local leftSection = menu:AddSection(category, "Left")
    local rightSection = menu:AddSection(category, "Right")
    
    menu:AddButton(category, "Activate " .. category, function()
        print(category .. ": Button clicked!")
    end)
    
    menu:AddToggle(category, category .. " Enabled", false, function(state)
        print(category .. ": Toggle state: " .. tostring(state))
    end)
    
    menu:AddKeybind(category, category .. " Key", Enum.KeyCode[category:sub(1, 1)], function(key)
        print(category .. ": New keybind: " .. key.Name)
    end)
    
    menu:AddColorPicker(category, category .. " Color", Color3.fromRGB(255, 255, 255), function(color)
        print(category .. ": New color: " .. tostring(color))
    end)
end
